#pragma checksum "/Volumes/MySSD/01.Codes/01.VS/01.LessonsCodes/OganiMvcProject/Ogani/SignalRIntro/Views/Home/ChatRoom.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ae7148c3664281c7cf1f673026c4cea4c4d12f9f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_ChatRoom), @"mvc.1.0.view", @"/Views/Home/ChatRoom.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Volumes/MySSD/01.Codes/01.VS/01.LessonsCodes/OganiMvcProject/Ogani/SignalRIntro/Views/_ViewImports.cshtml"
using SignalRIntro;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Volumes/MySSD/01.Codes/01.VS/01.LessonsCodes/OganiMvcProject/Ogani/SignalRIntro/Views/_ViewImports.cshtml"
using SignalRIntro.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ae7148c3664281c7cf1f673026c4cea4c4d12f9f", @"/Views/Home/ChatRoom.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d958eca3d8d7871d7d5103be282820da5f2fb121", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_ChatRoom : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/css/bootstrap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("login"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft-signalr/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/Volumes/MySSD/01.Codes/01.VS/01.LessonsCodes/OganiMvcProject/Ogani/SignalRIntro/Views/Home/ChatRoom.cshtml"
  
    ViewData["Title"] = "Chat Room";
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\n\n<!DOCTYPE html>\n<html lang=\"en\">\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ae7148c3664281c7cf1f673026c4cea4c4d12f9f6102", async() => {
                WriteLiteral("\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ae7148c3664281c7cf1f673026c4cea4c4d12f9f6539", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <style>
        .cursor-p {
            cursor: pointer;
        }

        .max_w-85 {
            max-width: 85%;
        }

        .select-list li:hover {
            background-color: rgba(0,0,0,0.1);
        }

        .select-list li.selected {
            color: #ffffff;
            font-size: 18px;
            font-weight: bold;
        }

        #onlines.select-list li.selected {
            background-color: #55c555;
        }

            #onlines.select-list li.selected:hover {
                background-color: #55c555;
            }

        #groups.select-list li {
            background-color: #ffc8c833;
        }

            #groups.select-list li:first-child {
                background-color: white;
            }

                #groups.select-list li:first-child:hover {
                    background-color: white;
                }

            #groups.select-list li.selected {
                background-color: #f7942533;
            }

                #groups.select-list li.select");
                WriteLiteral(@"ed:hover {
                    background-color: #f7942533;
                }

        .msg-box {
            display: flex;
            justify-content: flex-end;
        }

        .my-msg {
            float: right;
        }

        .group-email-li {
            display: flex;
            justify-content: flex-end;
            background-color: white !important;
        }
    </style>
    <title>Document</title>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ae7148c3664281c7cf1f673026c4cea4c4d12f9f9869", async() => {
                WriteLiteral(@"

    <div class=""container mt-5"">
        <div class=""row"">
            <div class=""col-4"">
                <ul class=""list-group select-list"" id=""onlines"">
                </ul>
                <hr />
                <ul class=""list-group select-list"" id=""groups"">
                    <li class=""list-group-item"">
                        <button id=""addGroup"" class=""btn btn-outline-success w-100"">+ Add Group</button>
                    </li>
                </ul>
            </div>
            <div class=""col-7 offset-1"">
                <h1 class=""title text-info"">Chat Room</h1>
                <hr />
                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ae7148c3664281c7cf1f673026c4cea4c4d12f9f10773", async() => {
                    WriteLiteral(@"
                    <div class=""mb-3"">
                        <label for=""email"" class=""form-label"">Email address</label>
                        <input type=""email"" class=""form-control"" id=""email"" name=""mailAddr"" placeholder=""Enter email"">
                    </div>
                    <button type=""submit"" class=""btn btn-primary"">Qosul</button>
                ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n\n\n                <div class=\"d-none chat\">\n                    <div class=\"mb-3\">\n");
                WriteLiteral(@"                        <h2 class=""form-group"" id=""to""></h2>
                        <h2 class=""form-group text-danger"" id=""toGroup""></h2>
                    </div>
                    <div class=""mb-3"">
                        <label for=""message"" class=""form-label"">Message: </label>
                        <textarea class=""form-control"" id=""message"" placeholder=""Enter Message""></textarea>
                    </div>
                    <button type=""submit"" class=""btn btn-primary"">Gonder</button>

                    <div class=""list-group mt-4 message"">

                    </div>
                </div>
            </div>
        </div>
    </div>

    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ae7148c3664281c7cf1f673026c4cea4c4d12f9f13543", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ae7148c3664281c7cf1f673026c4cea4c4d12f9f14627", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script>
        var isactive = false;

        $(window).focus(function () {
            isactive = true;
        }).blur(function () {
            isactive = false;
        });

        function playSound() {
            console.log(isactive);
            if (isactive) return;
            notify();
        }

        function notify() {
            if (window['audioMsg'] == null)
                window['audioMsg'] = new Audio('/uploads/sounds/notify-msg.wav');

            window['audioMsg'].play();
        }

        $(document).ready(function () {

            let myColor = randomColor();

            $('.chat button').click(function (e) {
                let to = $('.chat #to').text();
                let groupName = $('.chat #toGroup').text();
                let message = $('.chat #message').val().trim();

                if ($.connection == null) {
                    alert('elaqe kesilib!');
                    return;
                }

                if (message.length < 1) {
                ");
                WriteLiteral(@"    alert('mesaj bosdur!');
                    return;
                }

                if (to.length < 1 && groupName.length < 1) {
                    alert('email ve ya qrup secmemisiniz!');
                    return;
                }

                if (to.length > 0) {
                    $.connection.invoke('sendToFriend', to, message);
                    writeMsgOnMyPlace(message);
                } else {
                    $.connection.invoke('sendToGroup', groupName, message).then(r => {
                        if (!r) {
                            alert(""Siz qrupda deyilsiniz. Zehmet olmasa qrupa daxil olun!"");
                        } else {
                            writeMsgOnMyPlace(message);
                        }
                    });
                }

            });

            $('#login').submit(function (e) {
                e.preventDefault();

                let formData = new FormData(e.currentTarget);

                let email = formData.get('mailAddr');

          ");
                WriteLiteral(@"      if (email.length < 1) {
                    alert('e-mail qeyd edin!');
                    return;
                }

                $.connection = new signalR.HubConnectionBuilder()
                    .withUrl(`/chat?yourKey=${email}`)
                    .build();

                let colorByEmail = [];

                $.connection.on('messageReceive', function (from, msg) {
                    let clr = colorByEmail[colorByEmail.findIndex(cE => cE.email == from)]?.color;

                    if (clr == undefined) {
                        clr = randomColor();
                        colorByEmail.push({
                            email: from,
                            color: clr
                        });
                    }

                    let chatItem = $(`<a class=""list-group-item list-group-item-action"" data-email=""${from}"">
                                                                <div class=""d-flex w-100 justify-content-between"">
                                             ");
                WriteLiteral(@"                       <h5 class=""mb-1"" style=""color:${clr};"">${from}</h5>
                                                                    <small class=""text-muted"">${getTimeStr()}</small>
                                                                </div>
                                                                <p class=""max_w-85 mb-1"">${msg}</p>
                                                            </a>`);

                    $(chatItem).click(function (e) {
                        selectItem(e);
                    });

                    $('div.message').append(chatItem);

                    playSound()
                });

                $.connection.on('friendOnline', function (email) {

                    addToOnlineList(email);
                });

                $.connection.on('friendOffline', function (email) {

                    $(`#onlines li[data-email='${email}']`).remove();
                });

                $.connection.on('createNewGroup', function (groupName) {");
                WriteLiteral(@"

                    let groupLi = $('<li/>', {
                        class: 'list-group-item fw-bold text-danger fst-italic',
                        text: groupName
                    }).attr('data-group-key', groupName);

                    groupLi.append(`<ul class=""${groupName}_ul list-group mt-2""></ul>`);

                    $(groupLi).dblclick(function (e) {

                        let userEmail = prompt('Group-a daxil etmek istediyiniz istifadecinin emailini daxil edin: ');

                        if (userEmail == null || userEmail.trim().length <= 0)
                            return;

                        let groupKey = $(e.currentTarget).data('group-key');

                        $.connection.invoke('addToGroup', userEmail, groupKey).then(r => {
                            if (!r) {
                                alert(""Bele bir emailde istifadeci yoxdur, ya da istifadeci artiq qrupda var!"");
                            }
                        });
                    });

          ");
                WriteLiteral(@"          $(groupLi).click(function (e) {
                        let groupKey = $(e.currentTarget).data('group-key');

                        selectItem(e);
                    });

                    $('ul#groups').append(groupLi);
                });

                $.connection.on('friendAddedToGroup', function (groupName, userEmail) {
                    let badgeClr = randomColor(true);
                    $(`[data-group-key=${groupName}]`).find('ul').append(`<li class=""list-group-item group-email-li"">
                                                                        <span class=""badge rounded-pill"" style=""background-color:${badgeClr};"">${userEmail}</span>
                                                                        </li>`);
                });

                $.connection.start().then(function () {
                    console.log(""connected"");
                    $('.chat').removeClass('d-none');
                    $(e.currentTarget).addClass('d-none');

                    $.conn");
                WriteLiteral(@"ection.invoke('getOnlines')
                        .then(friends => {

                            $(friends).each((i, el) => {
                                addToOnlineList(el);
                            });
                        });

                    $.connection.invoke('GetGroups')
                        .then(groups => {

                            for (var groupName in groups) {
                                let groupLi = $('<li/>', {
                                    class: 'list-group-item fw-bold text-danger fst-italic',
                                    text: groupName
                                }).attr('data-group-key', groupName);

                                groupLi.append(`<ul class=""${groupName}_ul list-group mt-2""></ul>`);

                                $(groupLi).dblclick(function (e) {

                                    let userEmail = prompt('Group-a daxil etmek istediyiniz istifadecinin emailini daxil edin: ');

                                    if (userEmai");
                WriteLiteral(@"l == null || userEmail.trim().length <= 0)
                                        return;

                                    let groupKey = $(e.currentTarget).data('group-key');

                                    $.connection.invoke('addToGroup', userEmail, groupKey);
                                });

                                $(groupLi).click(function (e) {
                                    let groupKey = $(e.currentTarget).data('group-key');

                                    selectItem(e);
                                });

                                $('ul#groups').append(groupLi);

                                for (var userEmail of groups[groupName]) {

                                    let badgeClr = randomColor(true);

                                    $(`[data-group-key=${groupName}]`).find('ul').append(`<li class=""list-group-item group-email-li"">
                                                                        <span class=""badge rounded-pill"" style=""background-co");
                WriteLiteral(@"lor:${badgeClr};"">${userEmail}</span>
                                                                        </li>`);
                                }
                            }
                        }).catch(function (err) {
                            return console.error(err.toString());
                        });
                }).catch(function (err) {
                    return console.error(err.toString());
                });

            });

            $('#addGroup').click(function (e) {
                let groupName = prompt('Group adini daxil edin: ');

                if (groupName == null || groupName.trim().length <= 0)
                    return;

                groupName = groupName.replace(' ', '_');

                $.connection.invoke('createGroup', groupName);
            });

            function selectItem(e) {
                let email = $(e.currentTarget).data('email');
                let group = $(e.currentTarget).data('group-key');

                if (email == undefined");
                WriteLiteral(@" && group == undefined)
                    return;

                if (email != null) {
                    $('#toGroup').text('');
                    $('#to').text(email);
                } else {
                    $('#toGroup').text(group);
                    $('#to').text('');
                }

                $('.select-list li').removeClass('selected');
                $(e.currentTarget).addClass('selected');
            }

            function addToOnlineList(email) {

                let frendLi = $(`<li class=""list-group-item cursor-p"" data-email='${email}'>${email}</li>`);

                $(frendLi).click(function (e) {
                    selectItem(e);
                });

                $('#onlines').append(frendLi);
            }

            function getTimeStr() {

                let now = new Date();
                let month = now.getMonth() + 1;

                if (month < 10) {
                    month = `0${month}`;
                }

                let day = now.getDate();
  ");
                WriteLiteral(@"              if (day < 10) {
                    day = `0${day}`;
                }
                let hour = now.getHours();
                if (hour < 10) {
                    hour = `0${hour}`;
                }
                let minute = now.getMinutes();
                if (minute < 10) {
                    minute = `0${minute}`;
                }
                let sec = now.getSeconds();
                if (sec < 10) {
                    sec = `0${sec}`;
                }

                let time = `${day}.${month}.${now.getFullYear()} ${hour}:${minute}:${sec}`;

                return time;
            }

            function writeMsgOnMyPlace(message) {

                let chatItem = $(`<a class=""list-group-item list-group-item-action"">
                                                                <div class=""d-flex w-100 justify-content-between"">
                                                                    <small class=""text-muted"">${getTimeStr()}</small>
                         ");
                WriteLiteral(@"                                           <h5 class=""mb-1"" style=""color:${myColor};"">Me</h5>
                                                                </div>
                                                                <div class=""msg-box"">
                                                                    <p class=""my-msg max_w-85 mb-1"">${message}</p>
                                                                </div>
                                                            </a>`);

                $('div.message').append(chatItem);

                $('.chat #message').val('');
            }

            function randomColor(isBadge) {
                let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];

                let colorStr = '#';
                for (let i = 0; i < 6; i++) {
                    let clrItem;
                    if (isBadge && i == 2) {
                        do {
                            clrItem = Math.floor(Math.random() *");
                WriteLiteral(@" hex.length);

                            //console.log('clrItem: ',clrItem);
                            //console.log('clrItem < 12): ',clrItem < 12);
                            //console.log('hex[clrItem]: ',hex[clrItem]);
                            //console.log('!(hex[clrItem] < 10): ',!(hex[clrItem] < 10));

                        } while (clrItem > 11);
                    } else {
                        clrItem = Math.floor(Math.random() * hex.length);
                    }
                    colorStr += hex[clrItem];
                }

                //console.log('colorStr', colorStr);

                return colorStr;
            }

        });</script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</html>\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
